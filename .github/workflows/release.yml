name: Release

on:
  release:
    types: [created]

env:
  REGISTRY: quay.io
  IMAGE_NAME: dcm-project/k8s-service-provider

jobs:
  test:
    name: Run Tests
    uses: ./.github/workflows/test.yml

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          # Remove 'v' prefix if present and set as VERSION
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "FULL_TAG=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"
          echo "Full tag: ${GITHUB_REF_NAME}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Log in to Quay.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.VERSION }}
            type=raw,value=${{ steps.version.outputs.FULL_TAG }}
          labels: |
            org.opencontainers.image.title=K8S Service Provider for DCM
            org.opencontainers.image.description=A microservice for managing container and virtual machine deployments
            org.opencontainers.image.vendor=DCM Project
            org.opencontainers.image.source=https://github.com/dcm-project/k8s-service-provider
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ steps.version.outputs.VERSION }}
          path: sbom.spdx.json

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags Created:" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          VERSION=${GITHUB_REF_NAME#v}
          if [ "$VERSION" != "${{ github.ref_name }}" ]; then
            echo "- \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scan completed with Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM generated and uploaded as artifact" >> $GITHUB_STEP_SUMMARY